import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from PIL import Image
import numpy as np
import yaml, csv



configlocation = '../src/Gopher-ROS-Unity/gopher_navigation/maps/map.yaml'


def create_csv(configlocation):
    '''
    creates a .csv file from a .config and .pmg generated by gmapping 

    input:
        - configlocation - file location of the .config file 
    '''

    with open(configlocation, "r") as stream:
        try:
            config = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print(exc)

    folders = configlocation.split("/")
    configName = folders.pop()
    maplocation = ""

    for loc in folders:
        maplocation += loc + "/"

    maplocation += config['image'] # name of the map (technically relative location)
    resolution = config['resolution']  # meters per pixel
    origin = config['origin']  # starting config of the robot
    origin = origin[0:2]
    occupied_threshold = config['occupied_thresh']  # above this value is obstacle
    free_threshold = config['free_thresh']  # below this value is free


    with open(maplocation, 'rb') as pgmf:
        file_encoder = pgmf.readline()
        author = pgmf.readline()
        (width, height) = [int(i) for i in pgmf.readline().split()]
        map = plt.imread(pgmf)

    mappic = Image.open(maplocation)

    occupancymap = []
    occupyrow = []
    obstacle = occupied_threshold * 255
    free = free_threshold * 255

    print("about to make map")

    for row in range(height):
        for element in range(width):
            if mappic.getpixel((element, row)) >= obstacle:
                occupyrow.append(1)
            elif mappic.getpixel((element, row)) <= free:
                occupyrow.append(0)
            else:
                occupyrow.append(2)
        occupancymap.append(occupyrow)
        occupyrow = []

    mapinformation = "resolution: " + str(resolution) + '\n' +  "origin: " + str(origin)

    np.savetxt('./Gopher-ROS-Unity/gopher_control/src/map.csv', occupancymap, fmt='%i', header=mapinformation, comments="", delimiter=',')
    print("map exported")

def load_map(file_path):
    grid = []
    origin = [0, 0]
    
    # Load from the file
    with open(file_path, 'r') as map_file:
        reader = csv.reader(map_file)
        for i, row in enumerate(reader):
            # load start and goal point
            if i == 0:
                parts = row[0].split(": ")
                resolution = float(parts[1])
            elif i == 1:
                parts = row[0].split(": [")
                parts.append(row[1].split("]"))
                origin[0] = float(parts[1])
                origin[1] = float(row[1][1:-1])
            # load the map
            else:
                int_row = [int(col) for col in row]
                grid.append(int_row)
    return grid, origin, resolution


def draw_path(grid, path=[], title="Path"):
    # Visualization of the found path using matplotlib
    fig, ax = plt.subplots(1)
    ax.margins()
    # Draw map
    row = len(grid)     # map size
    col = len(grid[0])  # map size
    for i in range(row):
        for j in range(col):
            if grid[i][j]: 
                ax.add_patch(Rectangle((j-0.5, i-0.5),1,1,edgecolor='w',facecolor='w'))  # obstacle
            else:          
                ax.add_patch(Rectangle((j-0.5, i-0.5),1,1,edgecolor='w',facecolor='k'))  # free space
    # Draw path
    for x, y in path:
        ax.add_patch(Rectangle((y-0.5, x-0.5),1,1,edgecolor='k',facecolor='b'))          # path
    # Graph settings
    plt.title(title)
    plt.axis('scaled')
    plt.gca().invert_yaxis()

    

# create_csv(configlocation)
csv_location = './Gopher-ROS-Unity/gopher_control/src/map.csv'
grid, origin, resolution = load_map(csv_location)
draw_path(grid)
plt.show()
